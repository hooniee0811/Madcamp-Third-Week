datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"

  //enable full text search (in MySQL)
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

//initiate new model
model User {
  id String @id @default(uuid())
  
  //get from clerk when user signs up
  username String @unique
  imageUrl String @db.Text //@db.Text: can store more characters than usual string
  
  //id that used in Clerk
  externalUserId String @unique

  //our thing
  bio String? @db.Text

  following Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")
  
  blocking Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id String @id @default(uuid())
  name String @db.Text
  thumbnailUrl String? @db.Text
  
  //information from external streaming software
  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive Boolean @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])

  //enable searching with name
  @@fulltext([name])
}

model Follow {
  id String @id @default(uuid())

  //user of followerId follows user of followingId
  followerId String
  followingId String

  follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //@: field의 속성, @@: model 전체에 대한 속성
  //@@unique: model에서 해당 조합이 unique 해야한다.
  @@unique([followerId, followingId])
  
  //@@index: model의 인덱스를 정의함으로써 검색 시 모든 행을 스캔하지 않고 인덱스만 조사 -> for improving search performance
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}